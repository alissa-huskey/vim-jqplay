*jqplay.txt*  Run jq (the command-line JSON processor) interactively in Vim

Author:     bfrg <http://github.com/bfrg>
Website:    https://github.com/bfrg/vim-jqplay
License:    Same terms as Vim itself (see |license|)

==============================================================================
INTRODUCTION                                                          *jqplay*

Run jq <https://github.com/stedolan/jq> on a json buffer, and interactively
update the output window whenever the input buffer or the jq filter buffer are
modified, similar to https://jqplay.org.

==============================================================================
USAGE                                                           *jqplay-usage*

Commands ~

:Jqplay [{args}]                                                     *:Jqplay*
            Open a new jq scratch buffer and apply the entered jq filter to
            the current json buffer. The jq output is displayed in a new
            |:split| window, and updated interactively when both the jq
            scratch buffer or the input buffer are modified.

            {args} can be any jq command-line arguments as you would write
            them in the shell. Jq is always invoked with the options specified
            in {args}. These can be changed at any time during the session
            through |:Jqrun| (see below).

            The name of the output buffer is prefixed with "jq-output://" to
            distinguish it from the input buffer.

            The command can be preceded by a command modifier. For example, to
            open the output buffer in a new |:vertical| split, run: >
                :vertical Jqplay {args}
<
            Possible modifiers:
                |:vertical|
                |:topleft|
                |:botright|
                |:leftabove|  (same as |:aboveleft|)
                |:rightbelow| (same as |:belowright|)

            By default jq is invoked automatically when the |InsertLeave| or
            the |TextChanged| event is triggered. The list of autocommands can
            be changed with the "autocmds" entry, see |jqplay.autocmds|
            below.

:JqplayClose[!]                                                 *:JqplayClose*
            Close the interactive jqplay session. This will delete all
            autocommands that are invoking jq on buffer change.

            Without the "!" all buffers are kept open. Adding "!" will also
            |:bwipeout| the jq filter and output buffers. If the input buffer
            is a scratch buffer ('buftype' is "nofile") it will be deleted as
            well. Think of ":JqplayClose!" as "I am done, close everything".

:Jqrun[!] [{args}]                                                    *:Jqrun*
            Invoke jq manually with the jq command-line arguments {args}. This
            will temporarily override the jq options previously set with
            ":Jqplay {args}". Adding a [!] will permanently set the jq options
            of the current jq scratch buffer to {args}.

            This command is useful to quickly run the same jq filter with
            different set of jq options, without closing the session.

            Alternatively, if you don't like to run jq interactively on every
            buffer change, disable all |jqplay.autocmds| and run ":Jqrun" on
            demand.

            Note: The command is available only after running |:Jqplay| or
            |:JqplayScratch|.

:Jqstop [{how}]                                                      *:Jqstop*
            Stop any running jq process that was previously started with
            |:Jqplay| or |:Jqrun|. When {how} is omitted, the job will be
            terminated. See |job_stop()| for more details on the {how} values.

:JqplayScratch[!] [{args}]                                    *:JqplayScratch*
            Like |:Jqplay| but start an interactive session in a new |:tab|
            page using a new scratch buffer as input for jq.

            The scratch buffer is always passed to jq as stdin, even when the
            -n/--null-input options have been specified in {args}.

            Adding "!" will create an interactive session without any input
            buffer and force the --null-input option.

==============================================================================
CONFIGURATION                                                  *jqplay-config*
                                                                    *g:jqplay*
All configuration is done through the |Dictionary| variable g:jqplay. The
following entries are supported:

    exe                                                         *g:jqplay.exe*
            Path to jq executable.
            Default: value found in $PATH

    opts                                                       *g:jqplay.opts*
            Default options that are always passed to jq, like "--tab". The
            arguments {args} passed to |:Jqplay| are appended to "opts".
            Default: ""

    autocmds                                               *g:jqplay.autocmds*
            List of |autocmd-events| when to invoke jq. The autocommands are
            set for both the input buffer and the jq scratch buffer. If you
            don't want to run jq interactively on every buffer change, set
            this entry to an empty list and run |:Jqrun| manually.
            Default: ["|InsertLeave|", "|TextChanged|"]

    delay                                                     *g:jqplay.delay*
            Time in ms after which jq is invoked when one of the events in
            |g:jqplay.autocmds| is triggered.
            Default: 500

Examples ~

    1. Use the local jq executable and tabs for indentation. Invoke jq
       whenever insert mode is left, or text is changed in insert or normal
       mode: >

       g:jqplay = {
           exe: '~/.local/bin/jq',
           opts: '--tab',
           autocmds: ['TextChanged', 'TextChangedI', 'InsertLeave']
       }
<
    2. Use tabs for indentation, don't run jq automatically on buffer change.
       Instead invoke jq manually with |:Jqrun|: >

       g:jqplay = {opts: '--tab', autocmds: []}
<
 vim:tw=78:et:ft=help:norl:
